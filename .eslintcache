[{"C:\\Users\\prane\\subreddittopcomments\\src\\index.js":"1","C:\\Users\\prane\\subreddittopcomments\\src\\reportWebVitals.js":"2","C:\\Users\\prane\\subreddittopcomments\\src\\App.js":"3","C:\\Users\\prane\\subreddittopcomments\\src\\components\\Home.js":"4","C:\\Users\\prane\\subreddittopcomments\\src\\components\\Comments.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":480,"mtime":1611906537184,"results":"9","hashOfConfig":"7"},{"size":2899,"mtime":1611945661667,"results":"10","hashOfConfig":"7"},{"size":2960,"mtime":1611955412553,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1uha51v",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\prane\\subreddittopcomments\\src\\index.js",[],["25","26"],"C:\\Users\\prane\\subreddittopcomments\\src\\reportWebVitals.js",[],"C:\\Users\\prane\\subreddittopcomments\\src\\App.js",[],"C:\\Users\\prane\\subreddittopcomments\\src\\components\\Home.js",["27","28"],"import React, { useState, useEffect } from 'react';\r\nimport '../App.css';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n  \r\n        this.state = {\r\n            inputs: {\r\n                subname: '',\r\n                timeframeInput: 'hour'\r\n            },\r\n          errorMsg: ''\r\n        }\r\n    \r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n  \r\n    \r\n    handleChange(event) {\r\n        this.setState({\r\n            inputs: Object.assign(\r\n                {},\r\n                this.state.inputs,\r\n                {[event.target.name] : event.target.value}\r\n            ),\r\n            errorMsg: ''\r\n        })\r\n    }\r\n    \r\n    handleSubmit(event) {\r\n        if (this.state.inputs.subname !== '' && \r\n            this.state.inputs.timeframeInput !== '') {\r\n            this.props.history.push({\r\n                pathname: '/comments',\r\n                state: {subname: this.state.inputs.subname, \r\n                        timeframe: this.state.inputs.timeframeInput}})\r\n        }\r\n        else {\r\n            this.setState({\r\n                inputs: this.state.inputs, \r\n                errorMsg: 'Please enter valid subreddit and timeframe'\r\n            });\r\n        }\r\n        event.preventDefault();\r\n    }\r\n  \r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <h1>Subreddit Search</h1>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Subreddit Name: &nbsp;\r\n                        <input type=\"text\" name='subname' value={this.state.subname} onChange={this.handleChange} />\r\n                    </label>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <label>\r\n                        Select a timeframe for your top comments: &nbsp;\r\n                        <select name='timeframeInput' value={this.state.timeframeInput} onChange={this.handleChange}>\r\n                            <option value=\"hour\">Now</option>\r\n                            <option value=\"day\">Today</option>\r\n                            <option value=\"week\">This Week</option>\r\n                            <option value=\"month\">This Month</option>\r\n                            <option value=\"year\">This Year</option>\r\n                            <option value=\"all\">All Time</option>\r\n                        </select>\r\n                    </label>\r\n                    <p>{this.state.errorMsg}</p>\r\n                    <br></br>\r\n        \r\n                    <input class=\"submit\" type=\"submit\" value=\"Submit\" />\r\n                    </form>\r\n                </header>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(Home);\r\n\r\n","C:\\Users\\prane\\subreddittopcomments\\src\\components\\Comments.js",["29","30","31","32"],"import React, { useState, useEffect } from 'react';\r\nimport '../App.css';\r\nimport { useLocation, withRouter } from 'react-router-dom';\r\n\r\n\r\nclass Comments extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n  \r\n        this.state = {\r\n            curComments: [],\r\n            message: 'Loading...'\r\n        }\r\n\r\n        this.handleBack = this.handleBack.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const subName = this.props.location.state.subname;\r\n        const timeframe = this.props.location.state.timeframe;\r\n\r\n        fetch(process.env.REACT_APP_API_URL+'/api/topcomments?sub='+subName+'&timeframe='+timeframe).then(res => res.json()).then(data => {\r\n            if (data.subreddit_articles.length == 0) {\r\n                this.setState({\r\n                    curComments: [],\r\n                    message: \"No posts for this subreddit. Try a different one!\"\r\n                })\r\n            }\r\n            else {\r\n                this.setState({\r\n                    curComments: data.subreddit_articles,\r\n                    message: ''\r\n                })\r\n            }\r\n        })\r\n        .catch(res => {\r\n            this.setState({\r\n                curComments: [],\r\n                message: \"No posts for this subreddit. Try a different one!\"\r\n            })\r\n        });\r\n    }\r\n\r\n    handleBack() {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    render() {\r\n        const timeframe_dict={\r\n            'hour': 'the last hour',\r\n            'day' : 'today',\r\n            'week' : 'this week',\r\n            'month' : 'this month',\r\n            'year' : 'this year',\r\n            'all' : 'all time'\r\n\r\n        }\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <h1>Subreddit Search</h1>\r\n                    <h3>Here are your top 20 comments from r/{this.props.location.state.subname} for {timeframe_dict[this.props.location.state.timeframe]}! </h3>\r\n                    <button class=\"submit\" onClick={this.handleBack}>Go Back</button>\r\n                    <p>{this.state.message}</p>\r\n                    {this.state.curComments.map(comment => (\r\n                        <a class=\"redditpost\" href={\"https://www.reddit.com\"+comment.Redditurl}>\r\n                            <div class=\"posttitle\">{comment.Title}</div>\r\n                            <div class=\"postcontent\">\r\n        \r\n                                <p><span role=\"img\" aria-label=\"upvote\">üëç</span>:{comment.Upvotes} \r\n                                &nbsp; &nbsp;\r\n                                <span role=\"img\" aria-label=\"downvote\">üëé</span>:{comment.Downvotes}</p>\r\n                            </div>\r\n                            <div class=\"postauthor\">Posted by {comment.Author}</div>\r\n                        </a>\r\n                    ))}\r\n                </header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Comments);",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":1,"column":17,"nodeType":"39","messageId":"40","endLine":1,"endColumn":25},{"ruleId":"37","severity":1,"message":"41","line":1,"column":27,"nodeType":"39","messageId":"40","endLine":1,"endColumn":36},{"ruleId":"37","severity":1,"message":"38","line":1,"column":17,"nodeType":"39","messageId":"40","endLine":1,"endColumn":25},{"ruleId":"37","severity":1,"message":"41","line":1,"column":27,"nodeType":"39","messageId":"40","endLine":1,"endColumn":36},{"ruleId":"37","severity":1,"message":"42","line":3,"column":10,"nodeType":"39","messageId":"40","endLine":3,"endColumn":21},{"ruleId":"43","severity":1,"message":"44","line":23,"column":48,"nodeType":"45","messageId":"46","endLine":23,"endColumn":50},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useLocation' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]