{"version":3,"sources":["components/Home.js","components/Comments.js","App.js","reportWebVitals.js","index.js"],"names":["Home","props","state","inputs","subname","timeframeInput","errorMsg","handleChange","bind","handleSubmit","event","this","setState","Object","assign","target","name","value","history","push","pathname","timeframe","preventDefault","className","onSubmit","type","onChange","class","React","Component","withRouter","Comments","curComments","message","handleBack","subName","location","fetch","process","REACT_APP_API_URL","then","res","json","data","subreddit_articles","length","catch","goBack","onClick","map","comment","href","Redditurl","Title","role","aria-label","Upvotes","Downvotes","Author","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc31d938.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../App.css';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n  \r\n        this.state = {\r\n            inputs: {\r\n                subname: '',\r\n                timeframeInput: 'hour'\r\n            },\r\n          errorMsg: ''\r\n        }\r\n    \r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n  \r\n    \r\n    handleChange(event) {\r\n        this.setState({\r\n            inputs: Object.assign(\r\n                {},\r\n                this.state.inputs,\r\n                {[event.target.name] : event.target.value}\r\n            ),\r\n            errorMsg: ''\r\n        })\r\n    }\r\n    \r\n    handleSubmit(event) {\r\n        if (this.state.inputs.subname !== '' && \r\n            this.state.inputs.timeframeInput !== '') {\r\n            this.props.history.push({\r\n                pathname: '/comments',\r\n                state: {subname: this.state.inputs.subname, \r\n                        timeframe: this.state.inputs.timeframeInput}})\r\n        }\r\n        else {\r\n            this.setState({\r\n                inputs: this.state.inputs, \r\n                errorMsg: 'Please enter valid subreddit and timeframe'\r\n            });\r\n        }\r\n        event.preventDefault();\r\n    }\r\n  \r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <h1>Subreddit Search</h1>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Subreddit Name: &nbsp;\r\n                        <input type=\"text\" name='subname' value={this.state.subname} onChange={this.handleChange} />\r\n                    </label>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <label>\r\n                        Select a timeframe for your top comments: &nbsp;\r\n                        <select name='timeframeInput' value={this.state.timeframeInput} onChange={this.handleChange}>\r\n                            <option value=\"hour\">Now</option>\r\n                            <option value=\"day\">Today</option>\r\n                            <option value=\"week\">This Week</option>\r\n                            <option value=\"month\">This Month</option>\r\n                            <option value=\"year\">This Year</option>\r\n                            <option value=\"all\">All Time</option>\r\n                        </select>\r\n                    </label>\r\n                    <p>{this.state.errorMsg}</p>\r\n                    <br></br>\r\n        \r\n                    <input class=\"submit\" type=\"submit\" value=\"Submit\" />\r\n                    </form>\r\n                </header>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(Home);\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport '../App.css';\r\nimport { useLocation, withRouter } from 'react-router-dom';\r\n\r\n\r\nclass Comments extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n  \r\n        this.state = {\r\n            curComments: [],\r\n            message: 'Loading...'\r\n        }\r\n\r\n        this.handleBack = this.handleBack.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const subName = this.props.location.state.subname;\r\n        const timeframe = this.props.location.state.timeframe;\r\n\r\n        fetch(process.env.REACT_APP_API_URL+'/api/topcomments?sub='+subName+'&timeframe='+timeframe).then(res => res.json()).then(data => {\r\n            if (data.subreddit_articles.length == 0) {\r\n                this.setState({\r\n                    curComments: [],\r\n                    message: \"No posts for this subreddit. Try a different one!\"\r\n                })\r\n            }\r\n            else {\r\n                this.setState({\r\n                    curComments: data.subreddit_articles,\r\n                    message: ''\r\n                })\r\n            }\r\n        })\r\n        .catch(res => {\r\n            this.setState({\r\n                curComments: [],\r\n                message: \"No posts for this subreddit. Try a different one!\"\r\n            })\r\n        });\r\n    }\r\n\r\n    handleBack() {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    render() {\r\n        const timeframe_dict={\r\n            'hour': 'the last hour',\r\n            'day' : 'today',\r\n            'week' : 'this week',\r\n            'month' : 'this month',\r\n            'year' : 'this year',\r\n            'all' : 'all time'\r\n\r\n        }\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <h1>Subreddit Search</h1>\r\n                    <h3>Here are your top 20 comments from r/{this.props.location.state.subname} for {timeframe_dict[this.props.location.state.timeframe]}! </h3>\r\n                    <button class=\"submit\" onClick={this.handleBack}>Go Back</button>\r\n                    <p>{this.state.message}</p>\r\n                    {this.state.curComments.map(comment => (\r\n                        <a class=\"redditpost\" href={\"https://www.reddit.com\"+comment.Redditurl}>\r\n                            <div class=\"posttitle\">{comment.Title}</div>\r\n                            <div class=\"postcontent\">\r\n        \r\n                                <p><span role=\"img\" aria-label=\"upvote\">üëç</span>:{comment.Upvotes} \r\n                                &nbsp; &nbsp;\r\n                                <span role=\"img\" aria-label=\"downvote\">üëé</span>:{comment.Downvotes}</p>\r\n                            </div>\r\n                            <div class=\"postauthor\">Posted by {comment.Author}</div>\r\n                        </a>\r\n                    ))}\r\n                </header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Comments);","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from './components/Home';\nimport Comments from './components/Comments';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={() => <Home />} />\n          <Route path=\"/comments\" exact component={() => <Comments />} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}